abstract class ben
{
  abstract public void display2();
 }
 class bn extends ben
 {
 public void display2()
 {
 System.out.println("drive is now defined"):
 }
 }

 /*
 1: ABSTRACT CLASS IS USED TO ACHIVE THE POLYMORPHISM
 2:IF THE ABSTRACT CLASS HAS ALL THE METHOD AS THE ABSTRACT THEN IT JUST
   FORCES THE OTHER CLASS WHICH EXTENDS IT TO MODIFY ALL ITS METHOD SO THAT IT
   CAN ACHIEVE THE POLYMORPHISM
 3: SO THEREFORE WE CAN USE THE INTERFACE TO ACHIEVE THE POLYMORPHISM
    IN THE INTERFACE ALL THE METHOD ARE BY DEFAULT ABSTRACT AND THE PUBLIC
 4: INTERFACE CAN HAVE THE SAME OBJECT AND THE REFRENCE AS WE CRETE IN THE CLASS
 5: IN THE CLASS WE USE THE EXTENDS WHILE IN THE INTERFACE WE USE THE IMPLEMENTS
 6: INTERFACE IS ALSO USED TO ACHIEVE THE POLYMORPHISM
 7: WE CAN INTERFACE USE WHEN ALL THE METHOD ARE ABSTRACT
 8: INTERFACE CAN HAVE THE REFERENCE BUT NOT THE OBJECT
 9: THE CLASS WILL BECOME THE ABSTRACT IF THE METHOD OF THE INTERFACE ARE NOT DEFINED
 10: A CLASS CAN HAVE ONE EXTENDS CLASS BUT THE INTERFACE CAN IMPLEMENT MORE THAN ONE INTERFACES
interface ben
{
  void display2(); // as the abstract are default written
 }
 class bn implements ben
 {
 public void display2()
 {
 System.out.println("drive is now defined"):
 }
 }
 public static void main(String[] args)
 {
}
}